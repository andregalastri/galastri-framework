<?php

namespace galastri\extensions\output\helpers;

use galastri\core\Debug;
use galastri\extensions\Exception;
use galastri\modules\Toolbox;

/**
 * This class is used in the template and view files, generated by the View output. The View output
 * creates an object called $galastri. This object is an instance of this class here. With it, the
 * developer can get the data returned by the route controller inside any file imported by the
 * template or view file.
 */
final class ViewHelper implements \Language
{    
    /**
     * Stores the returning route controller data.
     *
     * @var array
     */
    private array $routeControllerData;   

    /**
     * Stores the view file path, checked by the View output.
     *
     * @var string
     */
    private string $viewFilePath;

        
    /**
     * Sets up the properties.
     *
     * @param  array $routeControllerData           An array with the data returned by the route
     *                                              controller.
     * 
     * @param  null|string $viewFilePath            The view file path of the route.
     * 
     * @return void
     */
    public function __construct(array $routeControllerData, ?string $viewFilePath)
    {
        $this->routeControllerData = $routeControllerData;
        $this->viewFilePath = $viewFilePath;
    }
    
    /**
     * This method gets the data returned by the route controller. It can return all the data or
     * specific keys. If the key doesn't exist, an exception is thrown.
     *
     * @param  int|string ...$keys                  If empty, returns the entire array of the
     *                                              returning data of the route controller result.
     *                                              If an key is set, then the key is searched. If
     *                                              the array returned by the route controller is
     *                                              multidimensional, each key passed as parameter
     *                                              means an level of the array.
     *
     *                                              - Example:
     *                                              Data returned by the route controller:
     *                                              [
     *                                                  'data1' => 'value1',
     *                                                  'data2' => [
     *                                                      'subdata1' => 'subvalue1',
     *                                                  ],
     *                                              ];
     *
     *                                              To get the value of the 'subdata1', just pass
     *                                              the key levels, from the main to its children:
     * 
     *                                              echo $galastri->data('data2', 'subdata1');
     * 
     *                                              Result will be: 'subvalue1'.
     * 
     * @return mixed
     */
    public function data(/*int|string*/ ...$keys)// : mixed
    {
        Debug::setBacklog();

        $routeControllerData = $this->routeControllerData;

        if (empty($keys)) {
            return $routeControllerData;
        }

        foreach ($keys as $value) {
            if (isset($routeControllerData[$value])) {
                $routeControllerData = $routeControllerData[$value];
            } else {
                throw new Exception(self::VIEW_INVALID_DATA_KEY[1], self::VIEW_INVALID_DATA_KEY[0], [$value]);
            }
        }

        return $routeControllerData;
    }
    
    /**
     * Import an PHP file to the template of view file keeping the $galastri object usable inside
     * that file. When the value is 'view' it will automatically import the view set in the View
     * output.
     *
     * @param  null|string $path                    Path of the file that will be imported. If the
     *                                              value is 'view', it will get the view file set
     *                                              in the View output.
     * 
     * @return bool
     */
    public function import(?string $path): bool
    {
        Debug::setBacklog();

        $galastri = $this;

        if ($path === 'view' and $this->viewFilePath !== null) {
            return require_once(Toolbox::getRealPath($this->viewFilePath));
        }
    }
}
